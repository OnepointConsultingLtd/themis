/**
 * WEBPACK CONFIGURATION
 */

const path = require('path');
const webpack = require('webpack');
const TerserPlugin = require('terser-webpack-plugin'); // DEACTIVATED: was making build time real long
const HtmlWebpackPlugin = require('html-webpack-plugin');
const { CleanWebpackPlugin } = require('clean-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');

module.exports = (env) => {

  const isDev = process.env.NODE_ENV === 'development';
  const isProd = process.env.NODE_ENV === 'production';

  // start building the config
  const config = {};

  config.entry = './app/app.js';

  config.output = {
    filename: isDev ? '[name].js' : '[name].[chunkhash].js',
    chunkFilename: isDev ? '[name].chunk.js' : '[name].[chunkhash].chunk.js',
    path: path.resolve(__dirname, 'public'),
    publicPath: '/'
  }

  config.mode = isProd ? 'production' : 'development';

  /** See https://webpack.js.org/configuration/devtool/#devtool
  Emit a source map for easier debugging
  */
  config.devtool = isProd ? 'source-map' : 'inline-source-map',

    config.optimization = isDev ? {
      usedExports: true,
      splitChunks: {
        chunks: 'all',
        maxInitialRequests: 20,
        maxAsyncRequests: 20,
      }
    } : { // ### PRODUCTION
      minimize: true,
      minimizer: [
        new TerserPlugin({
          terserOptions: {
            warnings: false,
            compress: {
              comparisons: false,
            },
            parse: {},
            mangle: true,
            output: {
              comments: false,
              ascii_only: true,
            },
          },
          parallel: true,
          cache: true,
          sourceMap: true,
        }),
      ],
      nodeEnv: 'production',
      sideEffects: true,
      concatenateModules: true,
      runtimeChunk: 'single',
      splitChunks: {
        chunks: 'all',
        maxInitialRequests: 20,
        maxAsyncRequests: 20,
        minSize: 0,
        cacheGroups: {
          vendor: {
            test: /[\\/]node_modules[\\/]/,
            name(module) {
              const packageName = module.context.match(
                /[\\/]node_modules[\\/](.*?)([\\/]|$)/,
              )[1];
              return `npm.${packageName.replace('@', '')}`;
            },
          },
        },
      },
    };

  config.plugins = [
    isDev && new webpack.HotModuleReplacementPlugin(), // Tell webpack we want hot reloading
    new CleanWebpackPlugin({
      cleanOnceBeforeBuildPatterns: [
        '**/*',
        '!images/**',
        '!favicons/**',
      ]
    }), // Tell webpack to remove/clean your build folder(s).
    new HtmlWebpackPlugin({
      inject: 'body', // Inject all files that are generated by webpack, e.g. bundle.js, inside the <body> </body>
      template: './app/index.html',
      minify: isProd ? {
        removeComments: true,
        collapseWhitespace: true,
        removeRedundantAttributes: true,
        useShortDoctype: true,
        removeEmptyAttributes: true,
        removeStyleLinkTypeAttributes: true,
        keepClosingSlash: true,
        minifyJS: true,
        minifyCSS: true,
        minifyURLs: true,
      } : {},
    }),
    new MiniCssExtractPlugin({ filename: isDev ? "styles/[name].css" : "styles/[name].[chunkhash].css" })
    /** WEBPACK V5
    Always expose NODE_ENV to webpack, in order to use `process.env.NODE_ENV`
    inside your code for any environment checks
    new webpack.DefinePlugin({
        'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV),
        'process.domain.active': JSON.stringify(process.domain.active), // I was getting "process not defined" when navigating inside the app
        'process.domain': JSON.stringify(process.domain),
      }),
    */
  ].filter(Boolean);

  /** 
   * Launch inbuilt dev-server and proxy for dev env:
   * No need to run a node-express server  */
  config.devServer = isDev ? {
    contentBase: './public',
    compress: true,
    historyApiFallback: true, // Otherwise navigation cannot happen
    hot: true,
    port: 3000,
    overlay: true,
    proxy: {
      '/api/**': 'http://localhost:5000', // This is proxying to themis-server running on port 5000: https://stackoverflow.com/questions/36662065/webpack-dev-server-proxy-dosent-work 
      changeOrigin: true
    }
  } : {};

  /** Declare any special paths aliases:
   * Bringing order in the chaos of nested modules */
  config.resolve = {
    modules: ['node_modules', 'app'],
    extensions: ['.js', '.jsx', '.react.js'],
    mainFields: ['browser', 'jsnext:main', 'main'],
    alias: {
      'ba-components': path.resolve(__dirname, 'app/components/'),
      'ba-containers': path.resolve(__dirname, 'app/containers/'),
      'ba-actions': path.resolve(__dirname, 'app/redux/actions/'),
      'ba-styles': path.resolve(__dirname, 'app/styles/components/'),
      'ba-api': path.resolve(__dirname, 'app/api/'),
      'ba-images': path.resolve(__dirname, 'public/images/'),
      'ba-vendor': path.resolve(__dirname, 'node_modules/'),
      'ba-utils': path.resolve(__dirname, 'app/utils')
    }
  };

  // Make web variables accessible to webpack, e.g. window
  config.target = 'web';
  config.module = {
    rules: [
      {
        // Preprocess our own .css files
        // This is the place to add your own loaders (e.g. sass/less etc.)
        // for a list of loaders, see https://webpack.js.org/loaders/#styling
        test: /\.css$/,
        exclude: /node_modules/,
        use: ['style-loader', 'css-loader'],
      },
      {
        // Preprocess 3rd party .css files located in node_modules
        test: /\.css$/,
        include: /node_modules/,
        use: ['style-loader', 'css-loader'],
      },
      {
        test: /\.(eot|otf|ttf|woff|woff2)$/,
        use: 'file-loader',
      },
      {
        test: /\.(scss)$/,
        use: [{
          loader: 'style-loader'
        },
        {
          loader: 'css-loader',
          options:
          {
            sourceMap: false,
            importLoaders: 2,
            modules: true,
            localIdentName: '[local]__[hash:base64:5]'
          }
        },
        {
          loader: 'postcss-loader',
          options: {
            sourceMap: false
          }
        },
        {
          loader: 'sass-loader',
          options: {
            outputStyle: 'expanded',
            sourceMap: false
          }
        }],
      },
      {
        test: /\.md$/,
        use: 'raw-loader'
      },
      {
        test: /\.(jpg|png|gif|svg)$/,
        use:
        {
          loader: 'url-loader',
          options: {
            // Inline files smaller than 10 kB
            limit: 10 * 1024,
          },
        },
      },
      {
        test: /\.html$/,
        use: 'html-loader',
      },
      {
        test: /\.(mp4|webm)$/,
        use: {
          loader: 'url-loader',
          options: {
            limit: 10000,
          },
        },
      },
      {
        test: /\.(js|jsx)$/, // Major loader: compliles JSX syntax into vanilla JS: https://stackoverflow.com/questions/63769414/react-module-parse-failed-unexpected-token-you-may-need-an-appropriate-loade
        exclude: /node_modules/,
        loader: 'babel-loader',
        options: {
          presets: ['@babel/react'],
          plugins: ['@babel/syntax-dynamic-import']
        }
      }
    ]
  }

  return config;

};
